{"version":3,"file":"static/js/270.d21037df.chunk.js","mappings":"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","sources":["components/label.tsx","state/atoms/formState/tokenInput.ts","components/tokenizedInput.tsx","state/selectors/tokenInputSelector.ts","utils/arrayUtils.ts","pages/register/register.tsx"],"sourcesContent":["\r\n\r\nconst Label = ({ text, className }: any) => {\r\n    return (\r\n        <label className={className}>{text}</label>\r\n    );\r\n}\r\n\r\nexport default Label;","import { atom } from \"recoil\";\r\n\r\nexport const atomTokenInputState = atom({\r\n    key: 'TokenInputState',\r\n    default: {\r\n        inputToken: []\r\n    },\r\n});","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { atomTokenInputState } from \"../state/atoms/formState/tokenInput\";\r\nimport { isNullOrUndefined, isNumeric } from \"../utils/helpers\";\r\n\r\nconst initArray = (inputLength: number) => {\r\n    let arr: number[] = [];\r\n    for (let index = 0; index < inputLength; index++) {\r\n        arr.push(index);\r\n    }\r\n    return arr;\r\n}\r\n\r\nconst TokenizedInput = ({ inputLength = 6,\r\n    onType,\r\n    onDelete,\r\n    tokenType = \"number\",\r\n    name = \"token\"}: any) => {\r\n    const tokenInputData = useRecoilValue(atomTokenInputState);\r\n\r\n    const refs = useMemo(() => initArray(inputLength).map((_val, _i: any) => {\r\n        return React.createRef<HTMLInputElement>();\r\n    }), []);\r\n\r\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n        let val: string = e.target.value.toString();\r\n        let index = e.target.name.split(\"_\")[1]\r\n        if ((!isNullOrUndefined(tokenInputData.inputToken))) {\r\n            if (tokenType === \"number\") {\r\n                if (isNumeric(val)) {\r\n                    onType({ val: val, index: index });\r\n                }\r\n            } else {\r\n                onType({ val: val, index: index });\r\n            }\r\n        }\r\n    };\r\n\r\n    const onKeyDown = useMemo(() =>\r\n        (e: any) => {\r\n            let index = e.target.name.split(\"_\")[1]\r\n            if (e.key === 'Delete' || e.key === 'Backspace') {\r\n                e.target.value = \"\";\r\n                if (index > 0) {\r\n                    refs[index].current?.focus();\r\n                } else {\r\n                    refs[0].current?.focus();\r\n                }\r\n                onDelete(index);\r\n            }\r\n        }, []);\r\n\r\n\r\n    const [accDigitJsxElements,] = useState<JSX.Element[]>(\r\n        () => {\r\n            const filler: JSX.Element[] = [];\r\n            let size = Math.round(100 / 6);\r\n            for (let index = 0; index < inputLength; index++) {\r\n                filler.push(\r\n                    <input\r\n                        type={\"password\"}\r\n                        ref={refs[index]}\r\n                        key={\"otpBox\" + index}\r\n                        name={name.concat(\"_\", index)}\r\n                        style={{\r\n                            width: String(size - 2).concat('%'),\r\n                            marginLeft: \"2px\"\r\n                        }} value={refs[index].current?.value}\r\n                        onChange={onChange}\r\n                        onKeyDown={onKeyDown}\r\n                        className={\"short-input text-center otpBox\"} maxLength={1} />\r\n\r\n                );\r\n            }\r\n\r\n            return filler;\r\n        }\r\n    );\r\n\r\n    const defineFocus = (enterTokenValueLength: number) => {\r\n        if (enterTokenValueLength <= inputLength) {\r\n            if (refs[enterTokenValueLength] != null && refs[enterTokenValueLength] != undefined) {\r\n                refs[enterTokenValueLength].current?.focus();\r\n            }\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!isNullOrUndefined(tokenInputData.inputToken)) {\r\n            let enteredTokenValueLength = tokenInputData.inputToken?.length;\r\n            defineFocus(enteredTokenValueLength);\r\n        }\r\n    }, [tokenInputData]);\r\n\r\n    return (\r\n        <div className=\"d-flex justify-content-center align-self-center mb-3\">\r\n            {accDigitJsxElements}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TokenizedInput;","import { selector } from \"recoil\";\r\nimport { insertItemsStartingAt, removeItemAtIndex } from \"../../utils/arrayUtils\";\r\nimport { atomTokenInputState } from \"../atoms/formState/tokenInput\";\r\n\r\nexport const appendDataToTokenInput = selector({\r\n    key: 'AppendDataToTokenInput',\r\n    get: ({ get }) => get(atomTokenInputState),\r\n    set: ({ set, get }, { val, index }: any) => {\r\n\r\n        let tokenInputs = get(atomTokenInputState);\r\n        let newIn = insertItemsStartingAt(tokenInputs.inputToken, index, Array.of(val));\r\n        console.log(\"newIn::\", newIn);\r\n        set(\r\n            atomTokenInputState, Object.assign({ inputToken: newIn })\r\n        )\r\n    }\r\n});\r\n\r\nexport const removeFromInputData = selector({\r\n    key: 'RemoveFromInputData',\r\n    get: ({ get }) => (get(atomTokenInputState)),\r\n    set: ({ set, get }, index: any) => {\r\n        console.log(\"index::\", index);\r\n        let tokenInputs = get(atomTokenInputState);\r\n        console.log(\"tokenInputs::\", tokenInputs);\r\n        let newIn = removeItemAtIndex(tokenInputs.inputToken, index);\r\n        console.log(\"newIn::\", newIn);\r\n        set(\r\n            atomTokenInputState, Object.assign({ inputToken: newIn })\r\n        )\r\n    }\r\n});","export const replaceItemAtIndex = (arr: any[], index: number, newValue: any) => {\r\n    return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)];\r\n}\r\n\r\nexport const removeItemAtIndex = (arr: any[], index: number) => {\r\n    return [...arr.slice(0, index), ...arr.slice(index + 1)];\r\n}\r\n\r\nexport const insertItemsStartingAt = (arr: any[], index: any, ...newItems: any[]) => [\r\n    // part of the array before the specified index\r\n    ...arr.slice(0, index),\r\n    // inserted items\r\n    ...newItems,\r\n    // part of the array after the specified index\r\n    ...arr.slice(index)\r\n]","import { useEffect, useState } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { selector, useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { ResponsiveWidthWrapper } from \"../../assets/styles/breakPointUtilities\";\r\nimport { OutlinedButton, StyledButton } from \"../../assets/styles/common\";\r\nimport { StyledLink } from \"../../assets/styles/styledUtilities\";\r\nimport CustomProgressBarWithBrand from \"../../components/customProgressBarWithBrand\";\r\nimport FormGroup from \"../../components/formGroup\";\r\nimport Label from \"../../components/label\";\r\nimport TokenizedInput from \"../../components/tokenizedInput\";\r\nimport { atomTokenInputState } from \"../../state/atoms/formState/tokenInput\";\r\nimport { appendDataToTokenInput, removeFromInputData } from \"../../state/selectors/tokenInputSelector\";\r\n\r\nconst totalStage = 4;\r\nconst Register = () => {\r\n    const setTokenInputData = useSetRecoilState(appendDataToTokenInput);\r\n    const removeTokenInputData = useSetRecoilState(removeFromInputData);\r\n    const tokenInputValue = useRecoilValue(atomTokenInputState);\r\n\r\n    const [values, setValues] = useState(Object.assign({}));\r\n    const [myErrors] = useState(Object.assign({}));\r\n    const [stage, setStage] = useState(1);\r\n    const [progress, setProgress] = useState(() => (stage / totalStage) * 100);\r\n\r\n    const handleInputChange = (e: any) => {\r\n        setValues({ ...values, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const handleSubmit = (e: any) => {\r\n        setValues({ ...values, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    useEffect(() => {\r\n        setProgress((stage / totalStage) * 100);\r\n    }, [stage]);\r\n\r\n    return (\r\n        <Container className=\"d-flex h-100\">\r\n            <ResponsiveWidthWrapper className=\"mx-auto my-auto\">\r\n                <CustomProgressBarWithBrand now={progress} title=\"Create your account\" />\r\n                <form>\r\n                    {stage === 1 ? <><div className=\"row\">\r\n                        <div className=\"col-sm-12 col-md-12 mb-5\">\r\n                            <FormGroup\r\n                                input_name=\"email\"\r\n                                label_value=\"Email\"\r\n                                input_type=\"email\"\r\n                                input_id=\"email\"\r\n                                is_readonly={false}\r\n                                on_change={handleInputChange}\r\n                                input_value={values?.email ?? \"\"}\r\n                                error={{\r\n                                    hasError: myErrors.email,\r\n                                    message: myErrors.email,\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-12 col-md-12\">\r\n                                <FormGroup\r\n                                    input_name=\"password\"\r\n                                    label_value=\"Password\"\r\n                                    input_type=\"password\"\r\n                                    input_id=\"password\"\r\n                                    is_readonly={false}\r\n                                    on_change={handleInputChange}\r\n                                    input_value={values?.password ?? \"\"}\r\n                                    error={{\r\n                                        hasError: myErrors.password,\r\n                                        message: myErrors.password,\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </div></> : []}\r\n                    {/* 2ND SECTION */}\r\n                    {stage === 2 ? <>  <div className=\"row\">\r\n                        <div className=\"col-sm-12 col-md-12 mb-3\">\r\n                            <FormGroup\r\n                                input_name=\"firstName\"\r\n                                label_value=\"Firstname\"\r\n                                input_type=\"firstName\"\r\n                                input_id=\"firstName\"\r\n                                is_readonly={false}\r\n                                on_change={handleInputChange}\r\n                                input_value={values?.firstName ?? \"\"}\r\n                                error={{\r\n                                    hasError: myErrors.firstName,\r\n                                    message: myErrors.firstName,\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-12 col-md-12 mb-3\">\r\n                                <FormGroup\r\n                                    input_name=\"lastName\"\r\n                                    label_value=\"Lastname\"\r\n                                    input_type=\"lastName\"\r\n                                    input_id=\"lastName\"\r\n                                    is_readonly={false}\r\n                                    on_change={handleInputChange}\r\n                                    input_value={values?.lastName ?? \"\"}\r\n                                    error={{\r\n                                        hasError: myErrors.lastName,\r\n                                        message: myErrors.lastName,\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-12 col-md-12\">\r\n                                <FormGroup\r\n                                    input_name=\"username\"\r\n                                    label_value=\"Preferred Username\"\r\n                                    input_type=\"username\"\r\n                                    input_id=\"username\"\r\n                                    is_readonly={false}\r\n                                    on_change={handleInputChange}\r\n                                    input_value={values?.username ?? \"\"}\r\n                                    error={{\r\n                                        hasError: myErrors.username,\r\n                                        message: myErrors.username,\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </div> </> : []}\r\n                    {/* 3RD SECTION */}\r\n                    {stage === 3 ? <><div className=\"row\">\r\n                        <div className=\"col-sm-12 col-md-12 mb-3\">\r\n                            <FormGroup\r\n                                input_name=\"phoneNumber\"\r\n                                label_value=\"Phone number\"\r\n                                input_type=\"phoneNumber\"\r\n                                input_id=\"phoneNumber\"\r\n                                is_readonly={false}\r\n                                on_change={handleInputChange}\r\n                                input_value={values?.phoneNumber ?? \"\"}\r\n                                error={{\r\n                                    hasError: myErrors.phoneNumber,\r\n                                    message: myErrors.phoneNumber,\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-12 col-md-12 mb-3\">\r\n                                <FormGroup\r\n                                    input_name=\"gender\"\r\n                                    label_value=\"Gender\"\r\n                                    input_type=\"gender\"\r\n                                    input_id=\"gender\"\r\n                                    is_readonly={false}\r\n                                    on_change={handleInputChange}\r\n                                    input_value={values?.gender ?? \"\"}\r\n                                    error={{\r\n                                        hasError: myErrors.gender,\r\n                                        message: myErrors.gender,\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-12 col-md-12\">\r\n                                <FormGroup\r\n                                    input_name=\"referralCode\"\r\n                                    label_value=\"Referral code\"\r\n                                    input_type=\"referralCode\"\r\n                                    input_id=\"referralCode\"\r\n                                    is_readonly={false}\r\n                                    on_change={handleInputChange}\r\n                                    input_value={values?.referralCode ?? \"\"}\r\n                                    error={{\r\n                                        hasError: myErrors.referralCode,\r\n                                        message: myErrors.referralCode,\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </div></> : []}\r\n                    {/* 3RD SECTION */}\r\n                    {stage === totalStage ? <><div className=\"row\">\r\n                        <div>\r\n                            <Label className=\"mx-3 my-3\" text=\"Token\"/>\r\n                            <TokenizedInput\r\n                                onType={(val: any) => setTokenInputData(val)}\r\n                                value={tokenInputValue}\r\n                                name={\"token\"}\r\n                                onDelete={(index: any) => removeTokenInputData(index)}\r\n                            />\r\n                        </div>\r\n                    </div></> : []}\r\n\r\n\r\n                </form>\r\n                <div className=\"d-flex justify-content-between align-items-center\">\r\n                    {stage === 1 ? <div className=\"\">\r\n                        <StyledLink to=\"/\">Have an account ? Login</StyledLink>\r\n                    </div> : <OutlinedButton\r\n                        width=\"25%\"\r\n                        onClick={(e: any) => setStage(stage => stage - 1)}\r\n                    >\r\n                        Previous\r\n                    </OutlinedButton>}\r\n                    {stage != totalStage ? <StyledButton\r\n                        width=\"50%\"\r\n                        onClick={(e: any) => setStage(stage => stage + 1)}\r\n                    >\r\n                        Next\r\n                    </StyledButton> : <StyledButton\r\n                        width=\"50%\"\r\n                        onClick={handleSubmit}\r\n                    >\r\n                        Submit\r\n                    </StyledButton>}\r\n                </div>\r\n            </ResponsiveWidthWrapper >\r\n        </Container >\r\n    )\r\n}\r\n\r\nexport default Register;"],"names":["text","className","atomTokenInputState","atom","key","default","inputToken","inputLength","onType","onDelete","tokenType","name","tokenInputData","useRecoilValue","refs","useMemo","arr","index","push","initArray","map","_val","_i","React","onChange","e","preventDefault","val","target","value","toString","split","isNullOrUndefined","isNumeric","onKeyDown","current","focus","useState","filler","size","Math","round","type","ref","concat","style","width","String","marginLeft","maxLength","accDigitJsxElements","useEffect","enterTokenValueLength","undefined","defineFocus","length","appendDataToTokenInput","selector","get","set","newIn","newItems","slice","insertItemsStartingAt","Array","of","console","log","Object","assign","removeFromInputData","tokenInputs","removeItemAtIndex","setTokenInputData","useSetRecoilState","removeTokenInputData","tokenInputValue","values","setValues","myErrors","stage","setStage","progress","setProgress","handleInputChange","Container","now","title","input_name","label_value","input_type","input_id","is_readonly","on_change","input_value","email","error","hasError","message","password","firstName","lastName","username","phoneNumber","gender","referralCode","to","onClick"],"sourceRoot":""}